using Dapper.FastCrud.EntityDescriptors;
using Dapper.FastCrud.Mappings;
using System;

namespace Dapper.FastCrud.SqlBuilders
{
    internal class MySqlBuilder : GenericStatementSqlBuilder
    {
        public MySqlBuilder(EntityDescriptor entityDescriptor, EntityMapping entityMapping)
            : base(entityDescriptor, entityMapping, SqlDialect.MySql)
        {
        }

        /// <summary>
        ///     Constructs a full insert statement
        /// </summary>
        protected override string ConstructFullInsertStatementInternal()
        {
            var sql = ResolveWithCultureInvariantFormatter(
                $"INSERT INTO {GetTableName()} ({ConstructColumnEnumerationForInsert()}) VALUES ({ConstructParamEnumerationForInsert()}); ");

            if (RefreshOnInsertProperties.Length > 0)
            {
                // we have to bring some column values back
                if (KeyProperties.Length == 0)
                    throw new NotSupportedException(
                        $"Entity '{EntityMapping.EntityType.Name}' has database generated fields but no primary key to retrieve them with after insertion.");

                // we have an identity column, so we can fetch the rest of them
                if (InsertKeyDatabaseGeneratedProperties.Length == 1 && RefreshOnInsertProperties.Length == 1)
                {
                    // just one, this is going to be easy
                    sql +=
                        ResolveWithCultureInvariantFormatter(
                            $"SELECT LAST_INSERT_ID() as {GetDelimitedIdentifier(InsertKeyDatabaseGeneratedProperties[0].PropertyName)}");
                }
                else
                {
                    // There are no primary keys generated by the database
                    if (InsertKeyDatabaseGeneratedProperties.Length == 0)
                        sql += $"SELECT {ConstructRefreshOnInsertColumnSelection()} FROM {GetTableName()} WHERE" +
                               ConstructKeysWhereClause();
                    else
                        sql +=
                            ResolveWithCultureInvariantFormatter(
                                $"SELECT {ConstructRefreshOnInsertColumnSelection()} FROM {GetTableName()} WHERE {GetColumnName(InsertKeyDatabaseGeneratedProperties[0], null, false)} = LAST_INSERT_ID()");
                }
            }

            return sql;
        }

        protected override string ConstructFullSelectStatementInternal(
            string selectClause,
            string fromClause,
            FormattableString whereClause = null,
            FormattableString orderClause = null,
            long? skipRowsCount = null,
            long? limitRowsCount = null,
            bool forceTableColumnResolution = false)
        {
            var sql = ResolveWithCultureInvariantFormatter($"SELECT {selectClause} FROM {fromClause}");

            if (whereClause != null)
                sql += " WHERE " + ResolveWithSqlFormatter(whereClause, forceTableColumnResolution);
            if (orderClause != null)
                sql += " ORDER BY " + ResolveWithSqlFormatter(orderClause, forceTableColumnResolution);

            if (skipRowsCount.HasValue)
                sql +=
                    ResolveWithCultureInvariantFormatter(
                        $" LIMIT {skipRowsCount},{limitRowsCount ?? (int?)int.MaxValue}");
            else if (limitRowsCount.HasValue)
                sql += ResolveWithCultureInvariantFormatter($" LIMIT {limitRowsCount}");

            return sql;
        }
    }
}